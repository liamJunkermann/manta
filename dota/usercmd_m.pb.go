// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.5
// source: usercmd.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CInButtonStatePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buttonstate1 *uint64 `protobuf:"varint,1,opt,name=buttonstate1" json:"buttonstate1,omitempty"`
	Buttonstate2 *uint64 `protobuf:"varint,2,opt,name=buttonstate2" json:"buttonstate2,omitempty"`
	Buttonstate3 *uint64 `protobuf:"varint,3,opt,name=buttonstate3" json:"buttonstate3,omitempty"`
}

func (x *CInButtonStatePB) Reset() {
	*x = CInButtonStatePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInButtonStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInButtonStatePB) ProtoMessage() {}

func (x *CInButtonStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInButtonStatePB.ProtoReflect.Descriptor instead.
func (*CInButtonStatePB) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{0}
}

func (x *CInButtonStatePB) GetButtonstate1() uint64 {
	if x != nil && x.Buttonstate1 != nil {
		return *x.Buttonstate1
	}
	return 0
}

func (x *CInButtonStatePB) GetButtonstate2() uint64 {
	if x != nil && x.Buttonstate2 != nil {
		return *x.Buttonstate2
	}
	return 0
}

func (x *CInButtonStatePB) GetButtonstate3() uint64 {
	if x != nil && x.Buttonstate3 != nil {
		return *x.Buttonstate3
	}
	return 0
}

type CTicklessMoveStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Button  *int32   `protobuf:"varint,1,opt,name=button" json:"button,omitempty"`
	Pressed *bool    `protobuf:"varint,2,opt,name=pressed" json:"pressed,omitempty"`
	When    *float32 `protobuf:"fixed32,3,opt,name=when" json:"when,omitempty"`
}

func (x *CTicklessMoveStep) Reset() {
	*x = CTicklessMoveStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTicklessMoveStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTicklessMoveStep) ProtoMessage() {}

func (x *CTicklessMoveStep) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTicklessMoveStep.ProtoReflect.Descriptor instead.
func (*CTicklessMoveStep) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{1}
}

func (x *CTicklessMoveStep) GetButton() int32 {
	if x != nil && x.Button != nil {
		return *x.Button
	}
	return 0
}

func (x *CTicklessMoveStep) GetPressed() bool {
	if x != nil && x.Pressed != nil {
		return *x.Pressed
	}
	return false
}

func (x *CTicklessMoveStep) GetWhen() float32 {
	if x != nil && x.When != nil {
		return *x.When
	}
	return 0
}

type CBaseUserCmdPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandNumber    *int32               `protobuf:"varint,1,opt,name=command_number,json=commandNumber" json:"command_number,omitempty"`
	TickCount        *int32               `protobuf:"varint,2,opt,name=tick_count,json=tickCount" json:"tick_count,omitempty"`
	ButtonsPb        *CInButtonStatePB    `protobuf:"bytes,3,opt,name=buttons_pb,json=buttonsPb" json:"buttons_pb,omitempty"`
	Viewangles       *CMsgQAngle          `protobuf:"bytes,4,opt,name=viewangles" json:"viewangles,omitempty"`
	Forwardmove      *float32             `protobuf:"fixed32,5,opt,name=forwardmove" json:"forwardmove,omitempty"`
	Leftmove         *float32             `protobuf:"fixed32,6,opt,name=leftmove" json:"leftmove,omitempty"`
	Upmove           *float32             `protobuf:"fixed32,7,opt,name=upmove" json:"upmove,omitempty"`
	Impulse          *int32               `protobuf:"varint,8,opt,name=impulse" json:"impulse,omitempty"`
	Weaponselect     *int32               `protobuf:"varint,9,opt,name=weaponselect" json:"weaponselect,omitempty"`
	RandomSeed       *int32               `protobuf:"varint,10,opt,name=random_seed,json=randomSeed" json:"random_seed,omitempty"`
	Mousedx          *int32               `protobuf:"varint,11,opt,name=mousedx" json:"mousedx,omitempty"`
	Mousedy          *int32               `protobuf:"varint,12,opt,name=mousedy" json:"mousedy,omitempty"`
	Hasbeenpredicted *bool                `protobuf:"varint,13,opt,name=hasbeenpredicted" json:"hasbeenpredicted,omitempty"`
	PawnEntityHandle *uint32              `protobuf:"varint,14,opt,name=pawn_entity_handle,json=pawnEntityHandle" json:"pawn_entity_handle,omitempty"`
	TicklessMoves    []*CTicklessMoveStep `protobuf:"bytes,18,rep,name=tickless_moves,json=ticklessMoves" json:"tickless_moves,omitempty"`
}

func (x *CBaseUserCmdPB) Reset() {
	*x = CBaseUserCmdPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBaseUserCmdPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBaseUserCmdPB) ProtoMessage() {}

func (x *CBaseUserCmdPB) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBaseUserCmdPB.ProtoReflect.Descriptor instead.
func (*CBaseUserCmdPB) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{2}
}

func (x *CBaseUserCmdPB) GetCommandNumber() int32 {
	if x != nil && x.CommandNumber != nil {
		return *x.CommandNumber
	}
	return 0
}

func (x *CBaseUserCmdPB) GetTickCount() int32 {
	if x != nil && x.TickCount != nil {
		return *x.TickCount
	}
	return 0
}

func (x *CBaseUserCmdPB) GetButtonsPb() *CInButtonStatePB {
	if x != nil {
		return x.ButtonsPb
	}
	return nil
}

func (x *CBaseUserCmdPB) GetViewangles() *CMsgQAngle {
	if x != nil {
		return x.Viewangles
	}
	return nil
}

func (x *CBaseUserCmdPB) GetForwardmove() float32 {
	if x != nil && x.Forwardmove != nil {
		return *x.Forwardmove
	}
	return 0
}

func (x *CBaseUserCmdPB) GetLeftmove() float32 {
	if x != nil && x.Leftmove != nil {
		return *x.Leftmove
	}
	return 0
}

func (x *CBaseUserCmdPB) GetUpmove() float32 {
	if x != nil && x.Upmove != nil {
		return *x.Upmove
	}
	return 0
}

func (x *CBaseUserCmdPB) GetImpulse() int32 {
	if x != nil && x.Impulse != nil {
		return *x.Impulse
	}
	return 0
}

func (x *CBaseUserCmdPB) GetWeaponselect() int32 {
	if x != nil && x.Weaponselect != nil {
		return *x.Weaponselect
	}
	return 0
}

func (x *CBaseUserCmdPB) GetRandomSeed() int32 {
	if x != nil && x.RandomSeed != nil {
		return *x.RandomSeed
	}
	return 0
}

func (x *CBaseUserCmdPB) GetMousedx() int32 {
	if x != nil && x.Mousedx != nil {
		return *x.Mousedx
	}
	return 0
}

func (x *CBaseUserCmdPB) GetMousedy() int32 {
	if x != nil && x.Mousedy != nil {
		return *x.Mousedy
	}
	return 0
}

func (x *CBaseUserCmdPB) GetHasbeenpredicted() bool {
	if x != nil && x.Hasbeenpredicted != nil {
		return *x.Hasbeenpredicted
	}
	return false
}

func (x *CBaseUserCmdPB) GetPawnEntityHandle() uint32 {
	if x != nil && x.PawnEntityHandle != nil {
		return *x.PawnEntityHandle
	}
	return 0
}

func (x *CBaseUserCmdPB) GetTicklessMoves() []*CTicklessMoveStep {
	if x != nil {
		return x.TicklessMoves
	}
	return nil
}

type CUserCmdBasePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *CBaseUserCmdPB `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (x *CUserCmdBasePB) Reset() {
	*x = CUserCmdBasePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserCmdBasePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserCmdBasePB) ProtoMessage() {}

func (x *CUserCmdBasePB) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserCmdBasePB.ProtoReflect.Descriptor instead.
func (*CUserCmdBasePB) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{3}
}

func (x *CUserCmdBasePB) GetBase() *CBaseUserCmdPB {
	if x != nil {
		return x.Base
	}
	return nil
}

type CHLXUserCmdPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *CBaseUserCmdPB `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (x *CHLXUserCmdPB) Reset() {
	*x = CHLXUserCmdPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHLXUserCmdPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHLXUserCmdPB) ProtoMessage() {}

func (x *CHLXUserCmdPB) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHLXUserCmdPB.ProtoReflect.Descriptor instead.
func (*CHLXUserCmdPB) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{4}
}

func (x *CHLXUserCmdPB) GetBase() *CBaseUserCmdPB {
	if x != nil {
		return x.Base
	}
	return nil
}

type CDota2UserCmdPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                       *CBaseUserCmdPB `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	SpectatorQueryUnitEntindex *int32          `protobuf:"varint,2,opt,name=spectator_query_unit_entindex,json=spectatorQueryUnitEntindex" json:"spectator_query_unit_entindex,omitempty"`
	Crosshairtrace             *CMsgVector     `protobuf:"bytes,3,opt,name=crosshairtrace" json:"crosshairtrace,omitempty"`
	CamerapositionX            *int32          `protobuf:"varint,4,opt,name=cameraposition_x,json=camerapositionX" json:"cameraposition_x,omitempty"`
	CamerapositionY            *int32          `protobuf:"varint,5,opt,name=cameraposition_y,json=camerapositionY" json:"cameraposition_y,omitempty"`
	Clickbehavior              *uint32         `protobuf:"varint,6,opt,name=clickbehavior" json:"clickbehavior,omitempty"`
	Statspanel                 *uint32         `protobuf:"varint,7,opt,name=statspanel" json:"statspanel,omitempty"`
	Shoppanel                  *uint32         `protobuf:"varint,8,opt,name=shoppanel" json:"shoppanel,omitempty"`
	StatsDropdown              *uint32         `protobuf:"varint,9,opt,name=stats_dropdown,json=statsDropdown" json:"stats_dropdown,omitempty"`
	StatsDropdownSort          *uint32         `protobuf:"varint,10,opt,name=stats_dropdown_sort,json=statsDropdownSort" json:"stats_dropdown_sort,omitempty"`
}

func (x *CDota2UserCmdPB) Reset() {
	*x = CDota2UserCmdPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDota2UserCmdPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDota2UserCmdPB) ProtoMessage() {}

func (x *CDota2UserCmdPB) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDota2UserCmdPB.ProtoReflect.Descriptor instead.
func (*CDota2UserCmdPB) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{5}
}

func (x *CDota2UserCmdPB) GetBase() *CBaseUserCmdPB {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CDota2UserCmdPB) GetSpectatorQueryUnitEntindex() int32 {
	if x != nil && x.SpectatorQueryUnitEntindex != nil {
		return *x.SpectatorQueryUnitEntindex
	}
	return 0
}

func (x *CDota2UserCmdPB) GetCrosshairtrace() *CMsgVector {
	if x != nil {
		return x.Crosshairtrace
	}
	return nil
}

func (x *CDota2UserCmdPB) GetCamerapositionX() int32 {
	if x != nil && x.CamerapositionX != nil {
		return *x.CamerapositionX
	}
	return 0
}

func (x *CDota2UserCmdPB) GetCamerapositionY() int32 {
	if x != nil && x.CamerapositionY != nil {
		return *x.CamerapositionY
	}
	return 0
}

func (x *CDota2UserCmdPB) GetClickbehavior() uint32 {
	if x != nil && x.Clickbehavior != nil {
		return *x.Clickbehavior
	}
	return 0
}

func (x *CDota2UserCmdPB) GetStatspanel() uint32 {
	if x != nil && x.Statspanel != nil {
		return *x.Statspanel
	}
	return 0
}

func (x *CDota2UserCmdPB) GetShoppanel() uint32 {
	if x != nil && x.Shoppanel != nil {
		return *x.Shoppanel
	}
	return 0
}

func (x *CDota2UserCmdPB) GetStatsDropdown() uint32 {
	if x != nil && x.StatsDropdown != nil {
		return *x.StatsDropdown
	}
	return 0
}

func (x *CDota2UserCmdPB) GetStatsDropdownSort() uint32 {
	if x != nil && x.StatsDropdownSort != nil {
		return *x.StatsDropdownSort
	}
	return 0
}

type CCitadelUserCmdPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                  *CBaseUserCmdPB `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	VecCameraPosition     *CMsgVector     `protobuf:"bytes,2,opt,name=vec_camera_position,json=vecCameraPosition" json:"vec_camera_position,omitempty"`
	AngCameraAngles       *CMsgQAngle     `protobuf:"bytes,3,opt,name=ang_camera_angles,json=angCameraAngles" json:"ang_camera_angles,omitempty"`
	ExecuteAbilityIndices *int32          `protobuf:"varint,4,opt,name=execute_ability_indices,json=executeAbilityIndices" json:"execute_ability_indices,omitempty"`
	InShop                *bool           `protobuf:"varint,5,opt,name=in_shop,json=inShop" json:"in_shop,omitempty"`
	CameraRoamingSpeed    *float32        `protobuf:"fixed32,6,opt,name=camera_roaming_speed,json=cameraRoamingSpeed" json:"camera_roaming_speed,omitempty"`
	SpecTarget            *int32          `protobuf:"varint,7,opt,name=spec_target,json=specTarget" json:"spec_target,omitempty"`
}

func (x *CCitadelUserCmdPB) Reset() {
	*x = CCitadelUserCmdPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelUserCmdPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelUserCmdPB) ProtoMessage() {}

func (x *CCitadelUserCmdPB) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelUserCmdPB.ProtoReflect.Descriptor instead.
func (*CCitadelUserCmdPB) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{6}
}

func (x *CCitadelUserCmdPB) GetBase() *CBaseUserCmdPB {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CCitadelUserCmdPB) GetVecCameraPosition() *CMsgVector {
	if x != nil {
		return x.VecCameraPosition
	}
	return nil
}

func (x *CCitadelUserCmdPB) GetAngCameraAngles() *CMsgQAngle {
	if x != nil {
		return x.AngCameraAngles
	}
	return nil
}

func (x *CCitadelUserCmdPB) GetExecuteAbilityIndices() int32 {
	if x != nil && x.ExecuteAbilityIndices != nil {
		return *x.ExecuteAbilityIndices
	}
	return 0
}

func (x *CCitadelUserCmdPB) GetInShop() bool {
	if x != nil && x.InShop != nil {
		return *x.InShop
	}
	return false
}

func (x *CCitadelUserCmdPB) GetCameraRoamingSpeed() float32 {
	if x != nil && x.CameraRoamingSpeed != nil {
		return *x.CameraRoamingSpeed
	}
	return 0
}

func (x *CCitadelUserCmdPB) GetSpecTarget() int32 {
	if x != nil && x.SpecTarget != nil {
		return *x.SpecTarget
	}
	return 0
}

type CSGOInputHistoryEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewAngles         *CMsgQAngle `protobuf:"bytes,2,opt,name=view_angles,json=viewAngles" json:"view_angles,omitempty"`
	ShootPosition      *CMsgVector `protobuf:"bytes,3,opt,name=shoot_position,json=shootPosition" json:"shoot_position,omitempty"`
	RenderTickCount    *int32      `protobuf:"varint,4,opt,name=render_tick_count,json=renderTickCount" json:"render_tick_count,omitempty"`
	RenderTickFraction *float32    `protobuf:"fixed32,5,opt,name=render_tick_fraction,json=renderTickFraction" json:"render_tick_fraction,omitempty"`
	PlayerTickCount    *int32      `protobuf:"varint,6,opt,name=player_tick_count,json=playerTickCount" json:"player_tick_count,omitempty"`
	PlayerTickFraction *float32    `protobuf:"fixed32,7,opt,name=player_tick_fraction,json=playerTickFraction" json:"player_tick_fraction,omitempty"`
	TargetEntIndex     *int32      `protobuf:"varint,8,opt,name=target_ent_index,json=targetEntIndex" json:"target_ent_index,omitempty"`
	TargetHeadPosCheck *CMsgVector `protobuf:"bytes,9,opt,name=target_head_pos_check,json=targetHeadPosCheck" json:"target_head_pos_check,omitempty"`
	TargetPosCheck     *CMsgVector `protobuf:"bytes,10,opt,name=target_pos_check,json=targetPosCheck" json:"target_pos_check,omitempty"`
}

func (x *CSGOInputHistoryEntryPB) Reset() {
	*x = CSGOInputHistoryEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSGOInputHistoryEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSGOInputHistoryEntryPB) ProtoMessage() {}

func (x *CSGOInputHistoryEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSGOInputHistoryEntryPB.ProtoReflect.Descriptor instead.
func (*CSGOInputHistoryEntryPB) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{7}
}

func (x *CSGOInputHistoryEntryPB) GetViewAngles() *CMsgQAngle {
	if x != nil {
		return x.ViewAngles
	}
	return nil
}

func (x *CSGOInputHistoryEntryPB) GetShootPosition() *CMsgVector {
	if x != nil {
		return x.ShootPosition
	}
	return nil
}

func (x *CSGOInputHistoryEntryPB) GetRenderTickCount() int32 {
	if x != nil && x.RenderTickCount != nil {
		return *x.RenderTickCount
	}
	return 0
}

func (x *CSGOInputHistoryEntryPB) GetRenderTickFraction() float32 {
	if x != nil && x.RenderTickFraction != nil {
		return *x.RenderTickFraction
	}
	return 0
}

func (x *CSGOInputHistoryEntryPB) GetPlayerTickCount() int32 {
	if x != nil && x.PlayerTickCount != nil {
		return *x.PlayerTickCount
	}
	return 0
}

func (x *CSGOInputHistoryEntryPB) GetPlayerTickFraction() float32 {
	if x != nil && x.PlayerTickFraction != nil {
		return *x.PlayerTickFraction
	}
	return 0
}

func (x *CSGOInputHistoryEntryPB) GetTargetEntIndex() int32 {
	if x != nil && x.TargetEntIndex != nil {
		return *x.TargetEntIndex
	}
	return 0
}

func (x *CSGOInputHistoryEntryPB) GetTargetHeadPosCheck() *CMsgVector {
	if x != nil {
		return x.TargetHeadPosCheck
	}
	return nil
}

func (x *CSGOInputHistoryEntryPB) GetTargetPosCheck() *CMsgVector {
	if x != nil {
		return x.TargetPosCheck
	}
	return nil
}

type CSGOUserCmdPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                     *CBaseUserCmdPB            `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	InputHistory             []*CSGOInputHistoryEntryPB `protobuf:"bytes,2,rep,name=input_history,json=inputHistory" json:"input_history,omitempty"`
	Attack1StartHistoryIndex *int32                     `protobuf:"varint,6,opt,name=attack1_start_history_index,json=attack1StartHistoryIndex" json:"attack1_start_history_index,omitempty"`
	Attack2StartHistoryIndex *int32                     `protobuf:"varint,7,opt,name=attack2_start_history_index,json=attack2StartHistoryIndex" json:"attack2_start_history_index,omitempty"`
}

func (x *CSGOUserCmdPB) Reset() {
	*x = CSGOUserCmdPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSGOUserCmdPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSGOUserCmdPB) ProtoMessage() {}

func (x *CSGOUserCmdPB) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSGOUserCmdPB.ProtoReflect.Descriptor instead.
func (*CSGOUserCmdPB) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{8}
}

func (x *CSGOUserCmdPB) GetBase() *CBaseUserCmdPB {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CSGOUserCmdPB) GetInputHistory() []*CSGOInputHistoryEntryPB {
	if x != nil {
		return x.InputHistory
	}
	return nil
}

func (x *CSGOUserCmdPB) GetAttack1StartHistoryIndex() int32 {
	if x != nil && x.Attack1StartHistoryIndex != nil {
		return *x.Attack1StartHistoryIndex
	}
	return 0
}

func (x *CSGOUserCmdPB) GetAttack2StartHistoryIndex() int32 {
	if x != nil && x.Attack2StartHistoryIndex != nil {
		return *x.Attack2StartHistoryIndex
	}
	return 0
}

type CMsgVRHandInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vposition            *CMsgVector `protobuf:"bytes,1,opt,name=vposition" json:"vposition,omitempty"`
	Angles               *CMsgQAngle `protobuf:"bytes,2,opt,name=angles" json:"angles,omitempty"`
	Velocity             *CMsgVector `protobuf:"bytes,3,opt,name=velocity" json:"velocity,omitempty"`
	Localposition        *CMsgVector `protobuf:"bytes,4,opt,name=localposition" json:"localposition,omitempty"`
	Localangles          *CMsgQAngle `protobuf:"bytes,5,opt,name=localangles" json:"localangles,omitempty"`
	Sampletime           *float32    `protobuf:"fixed32,6,opt,name=sampletime" json:"sampletime,omitempty"`
	Filteredposition     *CMsgVector `protobuf:"bytes,7,opt,name=filteredposition" json:"filteredposition,omitempty"`
	Filteredangles       *CMsgQAngle `protobuf:"bytes,8,opt,name=filteredangles" json:"filteredangles,omitempty"`
	Filteredvelocity     *CMsgVector `protobuf:"bytes,9,opt,name=filteredvelocity" json:"filteredvelocity,omitempty"`
	Filteredangularvel   *CMsgVector `protobuf:"bytes,10,opt,name=filteredangularvel" json:"filteredangularvel,omitempty"`
	Filteredthrowvel     *CMsgVector `protobuf:"bytes,11,opt,name=filteredthrowvel" json:"filteredthrowvel,omitempty"`
	Triggeranalogvalue   *float32    `protobuf:"fixed32,12,opt,name=triggeranalogvalue" json:"triggeranalogvalue,omitempty"`
	Gripanalogvalue      *float32    `protobuf:"fixed32,13,opt,name=gripanalogvalue" json:"gripanalogvalue,omitempty"`
	Finger0              *float32    `protobuf:"fixed32,14,opt,name=finger0" json:"finger0,omitempty"`
	Finger1              *float32    `protobuf:"fixed32,15,opt,name=finger1" json:"finger1,omitempty"`
	Finger2              *float32    `protobuf:"fixed32,16,opt,name=finger2" json:"finger2,omitempty"`
	Finger3              *float32    `protobuf:"fixed32,17,opt,name=finger3" json:"finger3,omitempty"`
	Finger4              *float32    `protobuf:"fixed32,18,opt,name=finger4" json:"finger4,omitempty"`
	Fingersplay0         *float32    `protobuf:"fixed32,19,opt,name=fingersplay0" json:"fingersplay0,omitempty"`
	Fingersplay1         *float32    `protobuf:"fixed32,20,opt,name=fingersplay1" json:"fingersplay1,omitempty"`
	Fingersplay2         *float32    `protobuf:"fixed32,21,opt,name=fingersplay2" json:"fingersplay2,omitempty"`
	Fingersplay3         *float32    `protobuf:"fixed32,22,opt,name=fingersplay3" json:"fingersplay3,omitempty"`
	Trackpadanalogvaluex *float32    `protobuf:"fixed32,23,opt,name=trackpadanalogvaluex" json:"trackpadanalogvaluex,omitempty"`
	Trackpadanalogvaluey *float32    `protobuf:"fixed32,24,opt,name=trackpadanalogvaluey" json:"trackpadanalogvaluey,omitempty"`
	Joystickanalogvaluex *float32    `protobuf:"fixed32,25,opt,name=joystickanalogvaluex" json:"joystickanalogvaluex,omitempty"`
	Joystickanalogvaluey *float32    `protobuf:"fixed32,26,opt,name=joystickanalogvaluey" json:"joystickanalogvaluey,omitempty"`
}

func (x *CMsgVRHandInfo) Reset() {
	*x = CMsgVRHandInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgVRHandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgVRHandInfo) ProtoMessage() {}

func (x *CMsgVRHandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgVRHandInfo.ProtoReflect.Descriptor instead.
func (*CMsgVRHandInfo) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgVRHandInfo) GetVposition() *CMsgVector {
	if x != nil {
		return x.Vposition
	}
	return nil
}

func (x *CMsgVRHandInfo) GetAngles() *CMsgQAngle {
	if x != nil {
		return x.Angles
	}
	return nil
}

func (x *CMsgVRHandInfo) GetVelocity() *CMsgVector {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *CMsgVRHandInfo) GetLocalposition() *CMsgVector {
	if x != nil {
		return x.Localposition
	}
	return nil
}

func (x *CMsgVRHandInfo) GetLocalangles() *CMsgQAngle {
	if x != nil {
		return x.Localangles
	}
	return nil
}

func (x *CMsgVRHandInfo) GetSampletime() float32 {
	if x != nil && x.Sampletime != nil {
		return *x.Sampletime
	}
	return 0
}

func (x *CMsgVRHandInfo) GetFilteredposition() *CMsgVector {
	if x != nil {
		return x.Filteredposition
	}
	return nil
}

func (x *CMsgVRHandInfo) GetFilteredangles() *CMsgQAngle {
	if x != nil {
		return x.Filteredangles
	}
	return nil
}

func (x *CMsgVRHandInfo) GetFilteredvelocity() *CMsgVector {
	if x != nil {
		return x.Filteredvelocity
	}
	return nil
}

func (x *CMsgVRHandInfo) GetFilteredangularvel() *CMsgVector {
	if x != nil {
		return x.Filteredangularvel
	}
	return nil
}

func (x *CMsgVRHandInfo) GetFilteredthrowvel() *CMsgVector {
	if x != nil {
		return x.Filteredthrowvel
	}
	return nil
}

func (x *CMsgVRHandInfo) GetTriggeranalogvalue() float32 {
	if x != nil && x.Triggeranalogvalue != nil {
		return *x.Triggeranalogvalue
	}
	return 0
}

func (x *CMsgVRHandInfo) GetGripanalogvalue() float32 {
	if x != nil && x.Gripanalogvalue != nil {
		return *x.Gripanalogvalue
	}
	return 0
}

func (x *CMsgVRHandInfo) GetFinger0() float32 {
	if x != nil && x.Finger0 != nil {
		return *x.Finger0
	}
	return 0
}

func (x *CMsgVRHandInfo) GetFinger1() float32 {
	if x != nil && x.Finger1 != nil {
		return *x.Finger1
	}
	return 0
}

func (x *CMsgVRHandInfo) GetFinger2() float32 {
	if x != nil && x.Finger2 != nil {
		return *x.Finger2
	}
	return 0
}

func (x *CMsgVRHandInfo) GetFinger3() float32 {
	if x != nil && x.Finger3 != nil {
		return *x.Finger3
	}
	return 0
}

func (x *CMsgVRHandInfo) GetFinger4() float32 {
	if x != nil && x.Finger4 != nil {
		return *x.Finger4
	}
	return 0
}

func (x *CMsgVRHandInfo) GetFingersplay0() float32 {
	if x != nil && x.Fingersplay0 != nil {
		return *x.Fingersplay0
	}
	return 0
}

func (x *CMsgVRHandInfo) GetFingersplay1() float32 {
	if x != nil && x.Fingersplay1 != nil {
		return *x.Fingersplay1
	}
	return 0
}

func (x *CMsgVRHandInfo) GetFingersplay2() float32 {
	if x != nil && x.Fingersplay2 != nil {
		return *x.Fingersplay2
	}
	return 0
}

func (x *CMsgVRHandInfo) GetFingersplay3() float32 {
	if x != nil && x.Fingersplay3 != nil {
		return *x.Fingersplay3
	}
	return 0
}

func (x *CMsgVRHandInfo) GetTrackpadanalogvaluex() float32 {
	if x != nil && x.Trackpadanalogvaluex != nil {
		return *x.Trackpadanalogvaluex
	}
	return 0
}

func (x *CMsgVRHandInfo) GetTrackpadanalogvaluey() float32 {
	if x != nil && x.Trackpadanalogvaluey != nil {
		return *x.Trackpadanalogvaluey
	}
	return 0
}

func (x *CMsgVRHandInfo) GetJoystickanalogvaluex() float32 {
	if x != nil && x.Joystickanalogvaluex != nil {
		return *x.Joystickanalogvaluex
	}
	return 0
}

func (x *CMsgVRHandInfo) GetJoystickanalogvaluey() float32 {
	if x != nil && x.Joystickanalogvaluey != nil {
		return *x.Joystickanalogvaluey
	}
	return 0
}

type CMsgVRController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active           *bool           `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
	SupportsSkeleton *bool           `protobuf:"varint,2,opt,name=supports_skeleton,json=supportsSkeleton" json:"supports_skeleton,omitempty"`
	Info             *CMsgVRHandInfo `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (x *CMsgVRController) Reset() {
	*x = CMsgVRController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgVRController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgVRController) ProtoMessage() {}

func (x *CMsgVRController) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgVRController.ProtoReflect.Descriptor instead.
func (*CMsgVRController) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgVRController) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *CMsgVRController) GetSupportsSkeleton() bool {
	if x != nil && x.SupportsSkeleton != nil {
		return *x.SupportsSkeleton
	}
	return false
}

func (x *CMsgVRController) GetInfo() *CMsgVRHandInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CUserMsgVRCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active          *bool               `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
	TargetingMode   *bool               `protobuf:"varint,2,opt,name=targeting_mode,json=targetingMode" json:"targeting_mode,omitempty"`
	ControllerType  *uint32             `protobuf:"varint,3,opt,name=controller_type,json=controllerType" json:"controller_type,omitempty"`
	MiddleEyeLocal  *CMsgVector         `protobuf:"bytes,4,opt,name=middle_eye_local,json=middleEyeLocal" json:"middle_eye_local,omitempty"`
	ViewanglesLocal *CMsgQAngle         `protobuf:"bytes,5,opt,name=viewangles_local,json=viewanglesLocal" json:"viewangles_local,omitempty"`
	HmdControllers  []*CMsgVRController `protobuf:"bytes,6,rep,name=hmd_controllers,json=hmdControllers" json:"hmd_controllers,omitempty"`
}

func (x *CUserMsgVRCore) Reset() {
	*x = CUserMsgVRCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsgVRCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsgVRCore) ProtoMessage() {}

func (x *CUserMsgVRCore) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsgVRCore.ProtoReflect.Descriptor instead.
func (*CUserMsgVRCore) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{11}
}

func (x *CUserMsgVRCore) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *CUserMsgVRCore) GetTargetingMode() bool {
	if x != nil && x.TargetingMode != nil {
		return *x.TargetingMode
	}
	return false
}

func (x *CUserMsgVRCore) GetControllerType() uint32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return 0
}

func (x *CUserMsgVRCore) GetMiddleEyeLocal() *CMsgVector {
	if x != nil {
		return x.MiddleEyeLocal
	}
	return nil
}

func (x *CUserMsgVRCore) GetViewanglesLocal() *CMsgQAngle {
	if x != nil {
		return x.ViewanglesLocal
	}
	return nil
}

func (x *CUserMsgVRCore) GetHmdControllers() []*CMsgVRController {
	if x != nil {
		return x.HmdControllers
	}
	return nil
}

type VrInputDigitalActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activeorigin *uint64  `protobuf:"varint,1,opt,name=activeorigin" json:"activeorigin,omitempty"`
	Active       *bool    `protobuf:"varint,2,opt,name=active" json:"active,omitempty"`
	State        *bool    `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
	Changed      *bool    `protobuf:"varint,4,opt,name=changed" json:"changed,omitempty"`
	Updatetime   *float32 `protobuf:"fixed32,5,opt,name=updatetime" json:"updatetime,omitempty"`
}

func (x *VrInputDigitalActionData) Reset() {
	*x = VrInputDigitalActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrInputDigitalActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrInputDigitalActionData) ProtoMessage() {}

func (x *VrInputDigitalActionData) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrInputDigitalActionData.ProtoReflect.Descriptor instead.
func (*VrInputDigitalActionData) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{12}
}

func (x *VrInputDigitalActionData) GetActiveorigin() uint64 {
	if x != nil && x.Activeorigin != nil {
		return *x.Activeorigin
	}
	return 0
}

func (x *VrInputDigitalActionData) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *VrInputDigitalActionData) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

func (x *VrInputDigitalActionData) GetChanged() bool {
	if x != nil && x.Changed != nil {
		return *x.Changed
	}
	return false
}

func (x *VrInputDigitalActionData) GetUpdatetime() float32 {
	if x != nil && x.Updatetime != nil {
		return *x.Updatetime
	}
	return 0
}

type VrInputAnalogActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activeorigin *uint64     `protobuf:"varint,1,opt,name=activeorigin" json:"activeorigin,omitempty"`
	Position     *CMsgVector `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	Delta        *CMsgVector `protobuf:"bytes,3,opt,name=delta" json:"delta,omitempty"`
	Active       *bool       `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
	Updatetime   *float32    `protobuf:"fixed32,5,opt,name=updatetime" json:"updatetime,omitempty"`
}

func (x *VrInputAnalogActionData) Reset() {
	*x = VrInputAnalogActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrInputAnalogActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrInputAnalogActionData) ProtoMessage() {}

func (x *VrInputAnalogActionData) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrInputAnalogActionData.ProtoReflect.Descriptor instead.
func (*VrInputAnalogActionData) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{13}
}

func (x *VrInputAnalogActionData) GetActiveorigin() uint64 {
	if x != nil && x.Activeorigin != nil {
		return *x.Activeorigin
	}
	return 0
}

func (x *VrInputAnalogActionData) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *VrInputAnalogActionData) GetDelta() *CMsgVector {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *VrInputAnalogActionData) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *VrInputAnalogActionData) GetUpdatetime() float32 {
	if x != nil && x.Updatetime != nil {
		return *x.Updatetime
	}
	return 0
}

type VrInputSkeletalActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active       *bool   `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
	Activeorigin *uint64 `protobuf:"varint,2,opt,name=activeorigin" json:"activeorigin,omitempty"`
}

func (x *VrInputSkeletalActionData) Reset() {
	*x = VrInputSkeletalActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrInputSkeletalActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrInputSkeletalActionData) ProtoMessage() {}

func (x *VrInputSkeletalActionData) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrInputSkeletalActionData.ProtoReflect.Descriptor instead.
func (*VrInputSkeletalActionData) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{14}
}

func (x *VrInputSkeletalActionData) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *VrInputSkeletalActionData) GetActiveorigin() uint64 {
	if x != nil && x.Activeorigin != nil {
		return *x.Activeorigin
	}
	return 0
}

type VrSkeletalSummaryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingercurl  []float32 `protobuf:"fixed32,1,rep,name=fingercurl" json:"fingercurl,omitempty"`
	Fingersplay []float32 `protobuf:"fixed32,2,rep,name=fingersplay" json:"fingersplay,omitempty"`
}

func (x *VrSkeletalSummaryData) Reset() {
	*x = VrSkeletalSummaryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrSkeletalSummaryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrSkeletalSummaryData) ProtoMessage() {}

func (x *VrSkeletalSummaryData) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrSkeletalSummaryData.ProtoReflect.Descriptor instead.
func (*VrSkeletalSummaryData) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{15}
}

func (x *VrSkeletalSummaryData) GetFingercurl() []float32 {
	if x != nil {
		return x.Fingercurl
	}
	return nil
}

func (x *VrSkeletalSummaryData) GetFingersplay() []float32 {
	if x != nil {
		return x.Fingersplay
	}
	return nil
}

type VrSkeletalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkeletalActionData       *VrInputSkeletalActionData `protobuf:"bytes,1,opt,name=skeletal_action_data,json=skeletalActionData" json:"skeletal_action_data,omitempty"`
	SkeletalSummaryData      *VrSkeletalSummaryData     `protobuf:"bytes,2,opt,name=skeletal_summary_data,json=skeletalSummaryData" json:"skeletal_summary_data,omitempty"`
	BoneCount                *uint32                    `protobuf:"varint,3,opt,name=bone_count,json=boneCount" json:"bone_count,omitempty"`
	BoneTransformSource      *uint32                    `protobuf:"varint,4,opt,name=bone_transform_source,json=boneTransformSource" json:"bone_transform_source,omitempty"`
	CompressedBoneTransforms []byte                     `protobuf:"bytes,5,opt,name=compressed_bone_transforms,json=compressedBoneTransforms" json:"compressed_bone_transforms,omitempty"`
}

func (x *VrSkeletalData) Reset() {
	*x = VrSkeletalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrSkeletalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrSkeletalData) ProtoMessage() {}

func (x *VrSkeletalData) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrSkeletalData.ProtoReflect.Descriptor instead.
func (*VrSkeletalData) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{16}
}

func (x *VrSkeletalData) GetSkeletalActionData() *VrInputSkeletalActionData {
	if x != nil {
		return x.SkeletalActionData
	}
	return nil
}

func (x *VrSkeletalData) GetSkeletalSummaryData() *VrSkeletalSummaryData {
	if x != nil {
		return x.SkeletalSummaryData
	}
	return nil
}

func (x *VrSkeletalData) GetBoneCount() uint32 {
	if x != nil && x.BoneCount != nil {
		return *x.BoneCount
	}
	return 0
}

func (x *VrSkeletalData) GetBoneTransformSource() uint32 {
	if x != nil && x.BoneTransformSource != nil {
		return *x.BoneTransformSource
	}
	return 0
}

func (x *VrSkeletalData) GetCompressedBoneTransforms() []byte {
	if x != nil {
		return x.CompressedBoneTransforms
	}
	return nil
}

type CUerMsgVRActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalActionData []*VrInputDigitalActionData `protobuf:"bytes,1,rep,name=digital_action_data,json=digitalActionData" json:"digital_action_data,omitempty"`
	AnalogActionData  []*VrInputAnalogActionData  `protobuf:"bytes,2,rep,name=analog_action_data,json=analogActionData" json:"analog_action_data,omitempty"`
	Skeleton          []*VrSkeletalData           `protobuf:"bytes,3,rep,name=skeleton" json:"skeleton,omitempty"`
}

func (x *CUerMsgVRActions) Reset() {
	*x = CUerMsgVRActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUerMsgVRActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUerMsgVRActions) ProtoMessage() {}

func (x *CUerMsgVRActions) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUerMsgVRActions.ProtoReflect.Descriptor instead.
func (*CUerMsgVRActions) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{17}
}

func (x *CUerMsgVRActions) GetDigitalActionData() []*VrInputDigitalActionData {
	if x != nil {
		return x.DigitalActionData
	}
	return nil
}

func (x *CUerMsgVRActions) GetAnalogActionData() []*VrInputAnalogActionData {
	if x != nil {
		return x.AnalogActionData
	}
	return nil
}

func (x *CUerMsgVRActions) GetSkeleton() []*VrSkeletalData {
	if x != nil {
		return x.Skeleton
	}
	return nil
}

type VRSampleUserCmdPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *CBaseUserCmdPB   `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Hmd     *CUserMsgVRCore   `protobuf:"bytes,2,opt,name=hmd" json:"hmd,omitempty"`
	Actions *CUerMsgVRActions `protobuf:"bytes,3,opt,name=actions" json:"actions,omitempty"`
}

func (x *VRSampleUserCmdPB) Reset() {
	*x = VRSampleUserCmdPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VRSampleUserCmdPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VRSampleUserCmdPB) ProtoMessage() {}

func (x *VRSampleUserCmdPB) ProtoReflect() protoreflect.Message {
	mi := &file_usercmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VRSampleUserCmdPB.ProtoReflect.Descriptor instead.
func (*VRSampleUserCmdPB) Descriptor() ([]byte, []int) {
	return file_usercmd_proto_rawDescGZIP(), []int{18}
}

func (x *VRSampleUserCmdPB) GetBase() *CBaseUserCmdPB {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *VRSampleUserCmdPB) GetHmd() *CUserMsgVRCore {
	if x != nil {
		return x.Hmd
	}
	return nil
}

func (x *VRSampleUserCmdPB) GetActions() *CUerMsgVRActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

var File_usercmd_proto protoreflect.FileDescriptor

var file_usercmd_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x63, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a,
	0x10, 0x43, 0x49, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x42, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x33, 0x22, 0x59, 0x0a,
	0x11, 0x43, 0x54, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x22, 0xc2, 0x04, 0x0a, 0x0e, 0x43, 0x42, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x49, 0x6e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x09, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x50, 0x62, 0x12, 0x30, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0a,
	0x76, 0x69, 0x65, 0x77, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x75, 0x70, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x64, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x64, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x75,
	0x73, 0x65, 0x64, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x75, 0x73,
	0x65, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x62, 0x65, 0x65, 0x6e, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68,
	0x61, 0x73, 0x62, 0x65, 0x65, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x77,
	0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3e, 0x0a,
	0x0e, 0x74, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x54, 0x69,
	0x63, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x0d,
	0x74, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x22, 0x3a, 0x0a,
	0x0e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x28, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x42, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x50, 0x42, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x0d, 0x43, 0x48, 0x4c,
	0x58, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x42, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x42, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x0f, 0x43, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x42, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x0e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61,
	0x69, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x6f, 0x72, 0x74,
	0x22, 0xe1, 0x02, 0x0a, 0x11, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x42, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x13, 0x76, 0x65, 0x63, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x11, 0x76, 0x65, 0x63, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x11, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x0f, 0x61, 0x6e, 0x67, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x53, 0x68, 0x6f,
	0x70, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x6f, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0xec, 0x03, 0x0a, 0x17, 0x43, 0x53, 0x47, 0x4f, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x12, 0x31, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x73,
	0x68, 0x6f, 0x6f, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x63, 0x6b, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x43, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x50,
	0x6f, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x22, 0xfb, 0x01, 0x0a, 0x0d, 0x43, 0x53, 0x47, 0x4f, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x42, 0x61, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x42, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53,
	0x47, 0x4f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x31, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x31, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x32, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x32,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x96, 0x09, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x52, 0x48, 0x61, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x76, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x76, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x40,
	0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x76, 0x65, 0x6c,
	0x12, 0x3c, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x74, 0x68, 0x72, 0x6f,
	0x77, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x76, 0x65, 0x6c, 0x12, 0x2e,
	0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x67, 0x72, 0x69, 0x70, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x67, 0x72, 0x69, 0x70, 0x61, 0x6e, 0x61,
	0x6c, 0x6f, 0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x30, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x31, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x31, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x33, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x33,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x30, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x30, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x31, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x33, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x33, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70,
	0x61, 0x64, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x78, 0x12, 0x32,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x61, 0x6e,
	0x61, 0x6c, 0x6f, 0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x14, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x79, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x61, 0x6e,
	0x61, 0x6c, 0x6f, 0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x43,
	0x4d, 0x73, 0x67, 0x56, 0x52, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x6b, 0x65, 0x6c,
	0x65, 0x74, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x52,
	0x48, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb2,
	0x02, 0x0a, 0x0e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x56, 0x52, 0x43, 0x6f, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x45, 0x79, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x10, 0x76, 0x69, 0x65, 0x77, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0f, 0x68, 0x6d, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x52, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x0e, 0x68, 0x6d, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x18, 0x56, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xcb, 0x01, 0x0a,
	0x17, 0x56, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x56, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x22, 0x59, 0x0a, 0x15, 0x56, 0x72, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x63, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x63, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0xc5,
	0x02, 0x0a, 0x0e, 0x56, 0x72, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6b,
	0x65, 0x6c, 0x65, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x12, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x15, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x72, 0x53, 0x6b, 0x65,
	0x6c, 0x65, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x13, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x6f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x10, 0x43, 0x55, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x56, 0x52, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x56, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x12, 0x61,
	0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x56,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x6b, 0x65, 0x6c,
	0x65, 0x74, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x56, 0x72, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x56,
	0x52, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x42,
	0x12, 0x28, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x42, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x50, 0x42, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x68, 0x6d,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x56, 0x52, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x03, 0x68,
	0x6d, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x55, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x56, 0x52, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x2a, 0x48, 0x01, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66, 0x66, 0x2f, 0x6d, 0x61,
	0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74, 0x61, 0x80, 0x01, 0x00,
}

var (
	file_usercmd_proto_rawDescOnce sync.Once
	file_usercmd_proto_rawDescData = file_usercmd_proto_rawDesc
)

func file_usercmd_proto_rawDescGZIP() []byte {
	file_usercmd_proto_rawDescOnce.Do(func() {
		file_usercmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_usercmd_proto_rawDescData)
	})
	return file_usercmd_proto_rawDescData
}

var file_usercmd_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_usercmd_proto_goTypes = []interface{}{
	(*CInButtonStatePB)(nil),          // 0: dota.CInButtonStatePB
	(*CTicklessMoveStep)(nil),         // 1: dota.CTicklessMoveStep
	(*CBaseUserCmdPB)(nil),            // 2: dota.CBaseUserCmdPB
	(*CUserCmdBasePB)(nil),            // 3: dota.CUserCmdBasePB
	(*CHLXUserCmdPB)(nil),             // 4: dota.CHLXUserCmdPB
	(*CDota2UserCmdPB)(nil),           // 5: dota.CDota2UserCmdPB
	(*CCitadelUserCmdPB)(nil),         // 6: dota.CCitadelUserCmdPB
	(*CSGOInputHistoryEntryPB)(nil),   // 7: dota.CSGOInputHistoryEntryPB
	(*CSGOUserCmdPB)(nil),             // 8: dota.CSGOUserCmdPB
	(*CMsgVRHandInfo)(nil),            // 9: dota.CMsgVRHandInfo
	(*CMsgVRController)(nil),          // 10: dota.CMsgVRController
	(*CUserMsgVRCore)(nil),            // 11: dota.CUserMsgVRCore
	(*VrInputDigitalActionData)(nil),  // 12: dota.VrInputDigitalActionData
	(*VrInputAnalogActionData)(nil),   // 13: dota.VrInputAnalogActionData
	(*VrInputSkeletalActionData)(nil), // 14: dota.VrInputSkeletalActionData
	(*VrSkeletalSummaryData)(nil),     // 15: dota.VrSkeletalSummaryData
	(*VrSkeletalData)(nil),            // 16: dota.VrSkeletalData
	(*CUerMsgVRActions)(nil),          // 17: dota.CUerMsgVRActions
	(*VRSampleUserCmdPB)(nil),         // 18: dota.VRSampleUserCmdPB
	(*CMsgQAngle)(nil),                // 19: dota.CMsgQAngle
	(*CMsgVector)(nil),                // 20: dota.CMsgVector
}
var file_usercmd_proto_depIdxs = []int32{
	0,  // 0: dota.CBaseUserCmdPB.buttons_pb:type_name -> dota.CInButtonStatePB
	19, // 1: dota.CBaseUserCmdPB.viewangles:type_name -> dota.CMsgQAngle
	1,  // 2: dota.CBaseUserCmdPB.tickless_moves:type_name -> dota.CTicklessMoveStep
	2,  // 3: dota.CUserCmdBasePB.base:type_name -> dota.CBaseUserCmdPB
	2,  // 4: dota.CHLXUserCmdPB.base:type_name -> dota.CBaseUserCmdPB
	2,  // 5: dota.CDota2UserCmdPB.base:type_name -> dota.CBaseUserCmdPB
	20, // 6: dota.CDota2UserCmdPB.crosshairtrace:type_name -> dota.CMsgVector
	2,  // 7: dota.CCitadelUserCmdPB.base:type_name -> dota.CBaseUserCmdPB
	20, // 8: dota.CCitadelUserCmdPB.vec_camera_position:type_name -> dota.CMsgVector
	19, // 9: dota.CCitadelUserCmdPB.ang_camera_angles:type_name -> dota.CMsgQAngle
	19, // 10: dota.CSGOInputHistoryEntryPB.view_angles:type_name -> dota.CMsgQAngle
	20, // 11: dota.CSGOInputHistoryEntryPB.shoot_position:type_name -> dota.CMsgVector
	20, // 12: dota.CSGOInputHistoryEntryPB.target_head_pos_check:type_name -> dota.CMsgVector
	20, // 13: dota.CSGOInputHistoryEntryPB.target_pos_check:type_name -> dota.CMsgVector
	2,  // 14: dota.CSGOUserCmdPB.base:type_name -> dota.CBaseUserCmdPB
	7,  // 15: dota.CSGOUserCmdPB.input_history:type_name -> dota.CSGOInputHistoryEntryPB
	20, // 16: dota.CMsgVRHandInfo.vposition:type_name -> dota.CMsgVector
	19, // 17: dota.CMsgVRHandInfo.angles:type_name -> dota.CMsgQAngle
	20, // 18: dota.CMsgVRHandInfo.velocity:type_name -> dota.CMsgVector
	20, // 19: dota.CMsgVRHandInfo.localposition:type_name -> dota.CMsgVector
	19, // 20: dota.CMsgVRHandInfo.localangles:type_name -> dota.CMsgQAngle
	20, // 21: dota.CMsgVRHandInfo.filteredposition:type_name -> dota.CMsgVector
	19, // 22: dota.CMsgVRHandInfo.filteredangles:type_name -> dota.CMsgQAngle
	20, // 23: dota.CMsgVRHandInfo.filteredvelocity:type_name -> dota.CMsgVector
	20, // 24: dota.CMsgVRHandInfo.filteredangularvel:type_name -> dota.CMsgVector
	20, // 25: dota.CMsgVRHandInfo.filteredthrowvel:type_name -> dota.CMsgVector
	9,  // 26: dota.CMsgVRController.info:type_name -> dota.CMsgVRHandInfo
	20, // 27: dota.CUserMsgVRCore.middle_eye_local:type_name -> dota.CMsgVector
	19, // 28: dota.CUserMsgVRCore.viewangles_local:type_name -> dota.CMsgQAngle
	10, // 29: dota.CUserMsgVRCore.hmd_controllers:type_name -> dota.CMsgVRController
	20, // 30: dota.VrInputAnalogActionData.position:type_name -> dota.CMsgVector
	20, // 31: dota.VrInputAnalogActionData.delta:type_name -> dota.CMsgVector
	14, // 32: dota.VrSkeletalData.skeletal_action_data:type_name -> dota.VrInputSkeletalActionData
	15, // 33: dota.VrSkeletalData.skeletal_summary_data:type_name -> dota.VrSkeletalSummaryData
	12, // 34: dota.CUerMsgVRActions.digital_action_data:type_name -> dota.VrInputDigitalActionData
	13, // 35: dota.CUerMsgVRActions.analog_action_data:type_name -> dota.VrInputAnalogActionData
	16, // 36: dota.CUerMsgVRActions.skeleton:type_name -> dota.VrSkeletalData
	2,  // 37: dota.VRSampleUserCmdPB.base:type_name -> dota.CBaseUserCmdPB
	11, // 38: dota.VRSampleUserCmdPB.hmd:type_name -> dota.CUserMsgVRCore
	17, // 39: dota.VRSampleUserCmdPB.actions:type_name -> dota.CUerMsgVRActions
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_usercmd_proto_init() }
func file_usercmd_proto_init() {
	if File_usercmd_proto != nil {
		return
	}
	file_networkbasetypes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_usercmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInButtonStatePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTicklessMoveStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBaseUserCmdPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserCmdBasePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHLXUserCmdPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDota2UserCmdPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCitadelUserCmdPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSGOInputHistoryEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSGOUserCmdPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgVRHandInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgVRController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsgVRCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrInputDigitalActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrInputAnalogActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrInputSkeletalActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrSkeletalSummaryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrSkeletalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUerMsgVRActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VRSampleUserCmdPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_usercmd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_usercmd_proto_goTypes,
		DependencyIndexes: file_usercmd_proto_depIdxs,
		MessageInfos:      file_usercmd_proto_msgTypes,
	}.Build()
	File_usercmd_proto = out.File
	file_usercmd_proto_rawDesc = nil
	file_usercmd_proto_goTypes = nil
	file_usercmd_proto_depIdxs = nil
}
